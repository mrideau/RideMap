$utilities: (
    'text-align': (
        responsive: false,
        property: text-align,
        class: text,
        values: (
            left: left,
            right: right,
            center: center,
        ),
    ),
    'width': (
        responsive: true,
        property: width,
        class: w,
        values: (
            25: 25%,
            50: 50%,
            100: 100%,
        )
    ),
    'max-width': (
        responsive: true,
        property: max-width,
        class: mw,
        values: (
            25: 25%,
            50: 50%,
            75: 75%,
        ),
    ),
    'height': (
        responsive: true,
        property: height,
        class: h,
        values: (
            25: 25%,
            50: 50%,
            75: 75%,
            100: 100%,
        )
    ),
    'fit': (
        property: object-fit,
        class: fit,
        values: (
            cover: cover
        )
    ),
    'justify-content': (
        responsive: true,
        property: justify-content,
        values: (
            start: flex-start,
            end: flex-end,
            center: center,
            between: space-between,
            around: space-around,
            evenly: space-evenly,
        ),
    ),
    'flex-direction': (
        property: flex-direction,
        class: flex,
        values: (
            column: column,
            row: row,
        ),
    ),
    'align-items': (
        responsive: true,
        property: align-items,
        values: (
            start: flex-start,
            end: flex-end,
            center: center,
            revert: revert,
            stretch: stretch,
        ),
    ),
    'color': (
        property: 'color',
        values: (
            primary: var(--color-primary),
            danger: red,
            success: green,
            white: var(--text-white)
        )
    ),
    'bg-color': (
        class: bg-color,
        property: background-color,
        values: (
            primary: var(--color-primary),
            light: var(--bg-white),
            black: black
        ),
    ),
    'float': (
        property: float,
        values: (
            left: left,
            right: right
        )
    ),
    'display': (
        property: display,
        class: d,
        values: (
            none: none,
            block: block,
            inline: inline,
            flex: flex,
        )
    ),
    'border': (
        property: border-radius,
        class: border,
        values: (
            small: 5px
        )
    ),
    'position': (
        property: position,
        class: p,
        values: (
            relative: relative,
            absolute: absolute !important,
        )
    ),
    'top': (
        property: top,
        class: t,
        values: (
            0: 0
        ),
    ),
    'left': (
        property: left,
        class: l,
        values: (
            0: 0
        ),
    ),
    'padding': (
        responsive: true,
        property: padding,
        class: p,
        values: $spacing
    ),
    'padding-x': (
        responsive: true,
        property: padding-left padding-right,
        class: px,
        values: $spacing
    ),
    'margin': (
        responsive: true,
        property: margin,
        class: m,
        values: map-merge($spacing, (auto: auto))
    ),
    'margin-x': (
        responsive: true,
        property: margin-left margin-right,
        class: mx,
        values: map-merge($spacing, (auto: auto))
    ),
    'text': (
        property: text-decoration,
        class: text,
        values: (
            underline: underline,
        )
    )
);

@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $key, $utility in $utilities {
        @if (map-get($utility, responsive) or $infix == '') {
            $properties: map-get($utility, property);
            $values: map-get($utility, values);

            @each $key, $value in $values {
                $property-class: if(
                    map-has-key($utility, class),
                    map-get($utility, class),
                    nth($properties, 1)
                );
                $property-modifier: if($key, '-#{$key}', '');

                .#{$property-class + $infix + $property-modifier} {
                    @each $property in $properties {
                        #{$property}: $value;
                    }
                }
            }
        }
    }
}
